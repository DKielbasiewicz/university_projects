# -*- coding: utf-8 -*-
"""
Created on Thu Dec 12 14:32:45 2024

@author: dkkie
"""

import database as db
import numpy as np
import matplotlib.pyplot as plt

def add_movie(name = str, rating = float, duration = int, year = int, genre = str, gross_income = int): #dictionary use
    """
    Add a new movie to the dataset. Function checks whether a movie with the given name already exists in the dataset. 
    If the movie does not exist, it adds the movie along with its details to the dataset
    If the movie already exists, it returns a message that the movie is already in the dataset

    Parameters
    ----------
    name : str
        The name of the movie.
    rating : float
        The movie's rating.
    duration : int
        The duration of the movie in minutes.
    year : int
        The year the movie was released.
    genre : str
        The genre of the movie.
    gross_income : int
        The gross income generated by the movie.

    Returns
    -------
    str
        "The film is already saved in the data, try different one." if the movie already exists, and
        "Successfully Added" if the movie was successfully added to the dataset.

    """
    data = db.ReadData()
    new_movie_values = (rating, duration, year, genre, gross_income)
    if name in data:
        return "The film is already saved in the data, try different one."
    else:
        data[name] = new_movie_values
        db.SaveData(data)

    return "Succesfully Added"

    
def average_gross_income(data = dict): #tuple use
    """
    Calculate the average gross income of all movies in a dataset.

    Parameters
    ----------
    data : dict
        A dictionary where the keys are movie names (str) and the values 
        are tuples containing movie details. As the last item is gross_income.

    Returns
    -------
    float
        The average gross income of all movies. If the dataset is empty, 
        the function returns 0.

    """
    if data:
        total_gross = 0
        for movie in data.values():
            total_gross+=int(movie[4])
        return total_gross / len(data)
    else:
        return 0
    
def rating_statistics(data = dict): #array use
    """
    Function appends rating from each movie (tuple) to the list and then
    converts to the array. After that it manipulates the array and makes a plot
    of the frequency of the ratings from 0 to 10. Also marks the highest number of the films within 
    a rating score.

    Parameters
    ----------
    data : dict
        A dictionary where the keys are movie names (str) and the values
        are tuples containing movie details.

    Returns
    -------
    str
        It return "No data" if the data is incorrect and shows a plot if correct.

    """
    if data:
        a = []
        for movie in data.values():
            a.append(float(movie[0]))
        arr = np.array(a)
        ratings = np.zeros(10)
        for i in range(len(ratings)):
            ratings[i] = np.sum((arr >= i) & (arr < i+1))
        max_value_id = np.argmax(ratings)
        bar_colors = ['blue'] * len(ratings)
        bar_colors[np.argmax(ratings)] = 'red'
        plt.bar(range(1,11),ratings, color = bar_colors)
        plt.xlabel("Rating score")
        plt.ylabel("Number of ratings")
        plt.title("Movie rating distribution")
        plt.text(max_value_id+1, ratings[max_value_id]+2, f"Highest frequency {ratings[max_value_id]}",color = 'red', ha='center', fontweight = 'bold')
        plt.show()
    else:
        return "No data"
    
def genre_films(data = dict, genre = str): #dictionary use
    """
    Prints a list of movies that are in the given genre.
       
    Parameters
    ----------
    data : dict
        A dictionary where the keys are movie names (str) and the values
        are tuples containing movie details.
    genre : str
        A name of genre

    Returns
    -------
    str
        It returns a string "No data" if the data and genre are incorrect. Otherwise
        it prints the list of movies that meet the condition.

    """

    i = 1
    if data and genre:
        for movie_name in data.keys():
            if genre in data[movie_name][3].split():
                movie_info = f"{i}. {movie_name}: rating: {data[movie_name][0]}, duration: {data[movie_name][1]} min"
                print(movie_info)
                i+=1
        if i == 1:
            return False
    else:
        return False
    
def main():
    while True:
        operation = input("Hi! What would you like to do?\n[1] - Add movie\n[2] - Average gross income of all films\n[3] - Show rating statistics\n[4] - Show films based on given genre\n[5] - Exit\n")
        match operation:
            case "1":
                film_name = input("Please type a name of the movie\n")
                while True:
                    try:
                        film_rating = float(input("Please type a rating of the film: (0-10)\n"))
                        if 0 <= film_rating <= 10:
                            break
                        return ValueError
                    except:
                        print("It is not a correct rating")
                while True:
                    try:
                        film_duration = int(input("PLease type a film duration in minutes:\n"))
                        break
                    except:
                        print("That's not correct format (integer)")
                while True:
                    try:
                        film_year = int(input("Please type the year of the film release:\n"))
                        break
                    except:
                        print("It has to be integer")
                film_genre = input("Please type a genre of the film:\n")
                while True:
                    try:
                        film_gross_income = int(input("PLease type a gross income of the film:\n"))
                        break
                    except:
                        print("It has to be float number")
                print(add_movie(film_name, film_rating, film_duration, film_year, film_genre, film_gross_income))
            case "2":
                data = db.ReadData()
                print(average_gross_income(data))
            case "3":
                data = db.ReadData()
                print(rating_statistics(data))
            case "4":
                data = db.ReadData()
                while True:
                    user_genre = input("Please write down the correct genre:\n")
                    message = genre_films(data, user_genre)
                    if message == False:
                        print("That's not correct genre")
                        continue
                    else:
                        message
                        break
            case "5":
                break
            case other:
                print("There is no option like yours.\n")

if __name__=='__main__':
    main() 
            
    